name: Meshery Cloud Build
on:
#   workflow_call:
#     inputs:
#       release-environment: 
#         description: "Staging or Production (lowercase)"
#         required: true
#         default: "staging"
#         type: string
#       release-version:
#         description: "e.g. v0.6.26"
#         required: true
#         default: "latest"
#         type: string
  workflow_dispatch:
    inputs:
      release-ver:
        description: "Stable Release Version"
        required: true
        default: "v"
      stripped-release-ver:
        description: "Stripped Stable Release Version"
        required: true
        default: ""
      release-environment: 
        description: "Staging or Production (lowercase)"
        required: true
        default: "staging"
      release-version: 
        description: "e.g. v0.7.26"
        required: true
        default: "latest"

env:
  GIT_VERSION: ${{inputs.release-version}}
  GIT_STRIPPED_VERSION: ${{github.event.inputs.stripped-release-ver}}
  RELEASE_CHANNEL: ${{github.event.inputs.release-channel}}
  GIT_TAG: ${{ github.event.release.tag_name }}

jobs:
  print-inputs:
    runs-on: ubuntu-22.04
    steps:
      - run: |
          echo "Dispatched GIT_VERSION: ${{github.event.inputs.release-ver}}"
          echo " Dispatched GIT_STRIPPED_VERSION: ${{github.event.inputs.stripped-release-ver}}"
          echo "Env RELEASE_CHANNEL: ${{env.RELEASE_CHANNEL}}"
          echo "Env GIT_VERSION: ${{env.GIT_VERSION}}"
          echo "Env GIT_STRIPPED_VERSION: ${{env.GIT_STRIPPED_VERSION}}"
          echo "Env GIT_TAG: ${{ github.event.release.tag_name }}"

  update-doc-release-version:
    name: API Docs
    if: inputs.release-environment == 'production'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Meshery Cloud code
        uses: actions/checkout@v4
        with:
          repository: layer5io/meshery-cloud
          fetch-depth: 1
          token: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: API Docs - Install Redocly
        uses: actions/setup-node@v4
      - run: npm i -g @redocly/cli@latest
      - name: API Docs - Update schema.yml
        uses: fjogeleit/yaml-update-action@main
        with:
          repository: l5io/meshery-cloud
          branch: master
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          valueFile: 'models/openapi-schema/schema.yml'
          commitChange: true
          propertyPath: 'info.version'
          value: ${{inputs.release-version}}
          message: Updated meshery-cloud version to ${{inputs.release-version}}
          commitUserName: l5io
          commitUserEmail: l5io@layer5.io          
  staging:
    needs: update-doc-release-version
    if: always() && inputs.release-environment == 'staging' 
    name: Staging - Docker build and push
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Meshery Cloud code
        uses: actions/checkout@v4
        with:
            repository: layer5io/meshery-cloud
            fetch-depth: 1
            token: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: Build Docs
        run:  |
            npm i -g @redocly/cli@latest
            make api-docs-build
  docker-extension:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout 🛎️ repo
        uses: actions/checkout@master
      - name: Identify Release Values
        if: "${{ github.event.inputs.release-version}} != 'v' }}"
        run: |
          # GIT_TAG=`git symbolic-ref HEAD`
          if [[ ${GITHUB_REF} = refs/tags* ]]
          then
            echo RELEASE_CHANNEL=stable >> $GITHUB_ENV
          else
            echo RELEASE_CHANNEL=edge >> $GITHUB_ENV
          fi
          LATEST_VERSION=$(git ls-remote --sort='v:refname' --tags | tail -1 | cut -f2 | sed 's/refs\/tags\///g') >> $GITHUB_ENV
          GIT_VERSION=$(git ls-remote --sort='v:refname' --tags | tail -1 | cut -f2 | sed 's/refs\/tags\///g') >> $GITHUB_ENV
          GIT_STRIPPED_VERSION=$(git ls-remote --sort='v:refname' --tags | tail -1 | cut -f2 | sed 's/refs\/tags\///g' | cut -c2-)
          echo "Release channel determined to be $RELEASE_CHANNEL"
          echo "GIT_LATEST=$LATEST_VERSION" >> $GITHUB_ENV
          echo "GIT_VERSION=$GIT_VERSION" >> $GITHUB_ENV
          echo "GIT_STRIPPED_VERSION=$GIT_STRIPPED_VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: layer5/meshery-cloud
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{inputs.release-environment}}-{{sha}}
            type=semver,pattern={{version}},value=${{env.GIT_STRIPPED_VERSION}}
            type=raw,value=${{inputs.release-environment}}-{{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=${{inputs.release-environment}}-latest
            type=raw,value=${{inputs.release-environment}}-${{env.GIT_VERSION}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
        #   context: "{{defaultContext}}:install/docker-extension"
          push: true
          build-args: |
            ENVIRONMENT="stg"
            GIT_VERSION=${{inputs.release-environment}}-${{inputs.release-version}}
            RELEASE_CHANNEL=${{inputs.release-environment}}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
      - name: Deploy staging
        if: success()
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.MESHERY_CLOUD_AWS_STG_HOST }}
            username: ${{ secrets.MESHERY_CLOUD_AWS_PROD_USERNAME }}
            key: ${{ secrets.MESHERY_CLOUD_AWS_PROD_KEY }}
            port: 22
            script: |
                cd meshery-cloud
                sudo git pull
                sudo docker pull layer5/meshery-cloud:staging-latest
                sudo make stg-deploy

      # -
      #   name: Docker Hub Description
      #   uses: peter-evans/dockerhub-description@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     repository: meshery/meshery-docker-extension
      #     readme-filepath: /install/docker-extension/README.md
