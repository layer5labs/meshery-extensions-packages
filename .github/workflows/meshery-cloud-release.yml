name: Release and Deploy Meshery Cloud
on:
  workflow_call:
    inputs:
      release-environment: 
        description: "Staging or Production (lowercase)"
        required: true
        default: "staging"
        type: string
      release-version:
        description: "e.g. v0.8.312"
        required: true
        default: "latest"
        type: string
      branch:
        description: "Branch to deploy in the staging environment. If not provided, master branch of the repository will be used."
        default: "master"
        type: string
    secrets:
      GH_ACCESS_TOKEN: 
        required: true
      DOCKER_USERNAME: 
        required: true
      DOCKER_PASSWORD: 
        required: true
      MESHERY_CLOUD_AWS_PROD_USERNAME:
        required: true
      MESHERY_CLOUD_AWS_STG_HOST:
        required: true
      MESHERY_CLOUD_AWS_PROD_HOST:
        required: true
      MESHERY_CLOUD_AWS_PROD_KEY:
        required: true
      GLOBAL_TOKEN:
        required: true
      METAL03_HOST:
        required: true
      METAL03_KEY:
        required: true
      METAL03_USERNAME:
        required: true
      METAL02_HOST:
        required: true
      METAL02_KEY:
        required: true
      METAL02_USERNAME:
        required: true
      METAL04_HOST:
        required: true
      METAL04_KEY:
        required: true
      METAL04_USERNAME:
        required: true

  workflow_dispatch:
    inputs:
      release-environment: 
        description: "Staging or Production (lowercase)"
        required: true
        default: "production"
      release-version: 
        description: "e.g. v0.8.312 or 'latest'"
        required: true
        default: "v0.8.3"
      branch:
        description: "Branch to deploy in the staging environment. If not provided, master branch of the repository will be used."
        default: "master"
        type: string

env:
  GIT_VERSION: ${{inputs.release-version}}

jobs:
  update-doc-release-version:
    name: API Docs
    if: inputs.release-environment == 'production'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Meshery Cloud code
        uses: actions/checkout@v4
        with:
          repository: layer5io/meshery-cloud
          fetch-depth: 1
          token: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: API Docs - Install Redocly
        uses: actions/setup-node@v4
      - run: npm i -g @redocly/cli@latest
      - name: API Docs - Update schema.yml
        uses: fjogeleit/yaml-update-action@v0.15.0
        with:
          repository: l5io/meshery-cloud
          branch: master
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          valueFile: 'server/models/openapi-schema/schema.yml'
          commitChange: true
          propertyPath: 'info.version'
          value: ${{inputs.release-version}}
          message: Updated meshery-cloud version to ${{inputs.release-version}}
          commitUserName: l5io
          commitUserEmail: l5io@layer5.io
      
  lint-fix:
    name: Lint UI and Backend
    if: inputs.release-environment == 'staging'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Meshery Cloud code
        uses: actions/checkout@v4
        with:
          path: meshery-cloud
          repository: layer5io/meshery-cloud
          fetch-depth: 1
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          ref: ${{ inputs.branch }}
      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Install prettier and eslint
        run: |
           npm i -g prettier;
           npm i -g eslint;
      - name: Lint UI and Backend
        run: |
          cd meshery-cloud
          make ui-lint-fix
          make cloud-lint-fix
      - name: Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_user_name: l5io
          commit_user_email: l5io@layer5.io
          commit_author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          commit_options: '--signoff'
          commit_message: '[CI] Lint fix backend/ui'
          repository: meshery-cloud

  staging:
    needs: update-doc-release-version
    if: always() && inputs.release-environment == 'staging' 
    name: Staging - Docker build and push
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout 🛎️ repo
        uses: actions/checkout@master
        with:
          path: meshery-cloud
          repository: layer5io/meshery-cloud
          fetch-depth: 1
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          ref: ${{ inputs.branch }}
      - name: Identify Release Values
        if: "${{ github.event.inputs.release-version}} != 'v' }}"
        run: |
          # GIT_TAG=`git symbolic-ref HEAD`
          if [[ ${GITHUB_REF} = refs/tags* ]]
          then
            echo RELEASE_CHANNEL=stable >> $GITHUB_ENV
          else
            echo RELEASE_CHANNEL=edge >> $GITHUB_ENV
          fi
          LATEST_VERSION=$(git ls-remote --sort='v:refname' --tags | tail -1 | cut -f2 | sed 's/refs\/tags\///g') >> $GITHUB_ENV
          GIT_VERSION=$(git ls-remote --sort='v:refname' --tags | tail -1 | cut -f2 | sed 's/refs\/tags\///g') >> $GITHUB_ENV
          GIT_STRIPPED_VERSION=$(git ls-remote --sort='v:refname' --tags | tail -1 | cut -f2 | sed 's/refs\/tags\///g' | cut -c2-)
          echo "Release channel determined to be $RELEASE_CHANNEL"
          echo "GIT_LATEST=$LATEST_VERSION" >> $GITHUB_ENV
          echo "GIT_VERSION=$GIT_VERSION" >> $GITHUB_ENV
          echo "GIT_STRIPPED_VERSION=$GIT_STRIPPED_VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: layer5/meshery-cloud
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{inputs.release-environment}}-{{sha}}
            type=semver,pattern={{version}},value=${{env.GIT_STRIPPED_VERSION}}
            type=raw,value=${{inputs.release-environment}}-{{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=${{inputs.release-environment}}-latest
            type=raw,value=${{inputs.release-environment}}-${{env.GIT_VERSION}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
        #   context: "{{defaultContext}}:install/docker-extension"
          push: true
          build-args: |
            ENVIRONMENT="stg"
            GIT_VERSION=${{inputs.release-environment}}-${{inputs.release-version}}
            RELEASE_CHANNEL=${{inputs.release-environment}}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
      - name: Deploy staging on metal02
        uses: appleboy/ssh-action@master
        env:
            GIT_VERSION: ${{inputs.release-version}}
        with:
          host: ${{ secrets.METAL02_HOST }}
          username: ${{ secrets.METAL02_USERNAME }}
          key: ${{ secrets.METAL02_KEY }}
          port: 22
          envs: GIT_VERSION
          script: |
            helm upgrade -f ~/staging-fullstack/staging-layer5-values.yaml layer5 ~/staging-fullstack/meshery-cloud/install/kubernetes/helm/layer5-cloud/ -n staging-fullstack --set=image.tag=staging-$GIT_VERSION --set-file 'kratos.kratos.emailTemplates.recovery.valid.subject'=./staging-fullstack/meshery-cloud/config/email-templates/valid/email-recover-subject.body.gotmpl --set-file 'kratos.kratos.emailTemplates.recovery.valid.body'=./staging-fullstack/meshery-cloud/config/email-templates/valid/email-recover.body.gotmpl --set-file 'kratos.kratos.emailTemplates.verification.valid.subject'=./staging-fullstack/meshery-cloud/config/email-templates/valid/email-verify-subject.body.gotmpl --set-file 'kratos.kratos.emailTemplates.verification.valid.body'=./staging-fullstack/meshery-cloud/config/email-templates/valid/email-verify.body.gotmpl
  prod:
    needs: update-doc-release-version
    if: always() && inputs.release-environment == 'production'
    name: Production - Docker build and push
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout Meshery Cloud code
      uses: actions/checkout@v4
      with:
        repository: layer5io/meshery-cloud
        path: meshery-cloud
        fetch-depth: 1
        token: ${{ secrets.GH_ACCESS_TOKEN }}
        ref: ${{inputs.release-version}}
    - name: Build Docs
      working-directory: meshery-cloud
      run:  |
        npm i -g @redocly/cli@latest
        make api-docs-build
    - name: Setup UI Dependencies
      working-directory: meshery-cloud
      run: make ui-setup
    - name: Build RTK Query Codegen
      working-directory: meshery-cloud
      run: make ui-api-codegen
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Docker Meta
      id: meta
      uses: docker/metadata-action@v4
      with:
          images: layer5/meshery-cloud
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{inputs.release-environment}}-{{sha}}
            type=raw,value=${{inputs.release-environment}}-{{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=${{inputs.release-environment}}-latest
            type=raw,value=${{inputs.release-environment}}-${{inputs.release-version}}
            type=raw,value=${{inputs.release-environment}}-${{env.GIT_VERSION}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and Push
      uses: docker/build-push-action@v4
      with:
        context: meshery-cloud
        push: true
        build-args: |
          ENVIRONMENT=prod
          GIT_VERSION=${{inputs.release-environment}}-${{inputs.release-version}}
          RELEASE_CHANNEL=${{inputs.release-environment}}
          TOKEN=${{ secrets.GLOBAL_TOKEN }}
        tags: ${{ steps.meta.outputs.tags }}
        platforms: linux/amd64
    - name: Deploy production on metal04
      uses: appleboy/ssh-action@master
      env:
          GIT_VERSION: ${{inputs.release-environment}}-${{inputs.release-version}}
          GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      with:
        host: ${{ secrets.METAL04_HOST }}
        username: ${{ secrets.METAL04_USERNAME }}
        key: ${{ secrets.METAL04_KEY }}
        port: 22
        envs: 
            GIT_VERSION, GH_ACCESS_TOKEN
        # It is important to use bash, specifically so that git works
        # and can use the GH_ACCESS_TOKEN env var properly
        script: |
          bash 
          helm repo update layer5
          cd deploy/meshery-cloud && git pull https://l5io:$GH_ACCESS_TOKEN@github.com/layer5io/meshery-cloud.git master
          cd ../..
          helm upgrade --install -f ~/deploy/values.yaml cloud ~/deploy/meshery-cloud/install/kubernetes/helm/layer5-cloud/ -n prod --set=image.tag=$GIT_VERSION --set-file 'kratos.kratos.emailTemplates.recovery.valid.subject'=./deploy/meshery-cloud/config/email-templates/valid/email-recover-subject.body.gotmpl --set-file 'kratos.kratos.emailTemplates.recovery.valid.body'=./deploy/meshery-cloud/config/email-templates/valid/email-recover.body.gotmpl --set-file 'kratos.kratos.emailTemplates.verification.valid.subject'=./deploy/meshery-cloud/config/email-templates/valid/email-verify-subject.body.gotmpl --set-file 'kratos.kratos.emailTemplates.verification.valid.body'=./deploy/meshery-cloud/config/email-templates/valid/email-verify.body.gotmpl
